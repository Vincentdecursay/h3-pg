// statement list
start: statement (";" statement)* ";"? -> statements

// statement
?statement: create_type_stmt
          | create_cast_stmt
          | create_oper_stmt
          | create_func_stmt
          | comment_on_stmt


create_type_stmt: "CREATE" "TYPE" CNAME ("(" /([^\)])+/ ")")?

create_cast_stmt: "CREATE" "CAST" "(" /([^\)])+/ ")" "WITH" "FUNCTION" CNAME "(" /([^\)])+/ ")"

create_oper_stmt: "CREATE" "OPERATOR" /([^\(])+/ "(" /([^\)])+/ ")"

// CREATE [ OR REPLACE ] FUNCTION
//     name ( [ [ argmode ] [ argname ] argtype [ { DEFAULT | = } default_expr ] [, ...] ] )
//     [ RETURNS rettype
//       | RETURNS TABLE ( column_name column_type [, ...] ) ]
//   { LANGUAGE lang_name
//     | TRANSFORM { FOR TYPE type_name } [, ... ]
//     | WINDOW
//     | IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF
//     | CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
//     | [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
//     | COST execution_cost
//     | ROWS result_rows
//     | SET configuration_parameter { TO value | = value | FROM CURRENT }
//     | AS 'definition'
//     | AS 'obj_file', 'link_symbol'
//   } ...
//     [ WITH ( attribute [, ...] ) ]
create_func_stmt: "CREATE" ("OR" "REPLACE")? "FUNCTION" fun_name "(" [argument_list] ")" [create_fun_rets] create_fun_opts*
?create_fun_rets: "RETURNS" ("SETOF")? CNAME "[]"?
create_fun_opts: "LANGUAGE" CNAME
              | ("IMMUTABLE" | "STABLE" | "VOLATILE" | ("NOT"? "LEAKPROOF"))
              | (("CALLED" "ON" "NULL" "INPUT") | ("RETURNS" "NULL" "ON" "NULL" "INPUT") | "STRICT")
              | ("PARALLEL" ("UNSAFE" | "RESTRICTED" | "SAFE"))
              | "AS" string ("," CNAME)?
argument: "OUT"? [CNAME] CNAME "[]"? ("DEFAULT" expr)?
argument_list: argument ("," argument)*

// COMMENT ON
// {
//   ...
//   FUNCTION function_name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) |
//   ...
// } IS 'text'
comment_on_stmt: "COMMENT" "ON" comment_on_type "IS" string
comment_on_type: "FUNCTION" fun_name "(" [argument_list] ")" -> comment_on_function
               | "CAST" "(" CNAME "AS" CNAME ")" -> comment_on_cast

// generals
fun_name: [CNAME "."] CNAME
?expr: atom
atom: SIGNED_NUMBER -> number
    | "TRUE" -> true
    | "FALSE" -> false
string: STRING

// TERMINALS
LITERAL: SIGNED_NUMBER | ESCAPED_STRING
STRING: "'" /([^'])+/ "'"
      | "$$" /(.|\n)*?/ "$$"

MULTI_COMMENT : "/*" /(.|\n)+/ "*/"
SINGLE_COMMENT: "--" /([^\n])+/

COMMAND: "\\" /([^\n])+/

%import common (CNAME, ESCAPED_STRING, _STRING_ESC_INNER, SIGNED_NUMBER, WS, NEWLINE)
%ignore COMMAND
%ignore MULTI_COMMENT
%ignore SINGLE_COMMENT
%ignore WS